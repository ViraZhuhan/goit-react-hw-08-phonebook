{"version":3,"file":"static/js/698.64c55fc8.chunk.js","mappings":"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","sources":["redux/contacts/selectorsContacts.js","components/ContactList/ContactList.jsx","components/ContactsTitle/ContactsTitle.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogContent,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  Box,\n  Button,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\nimport {\n  deleteContact,\n  fetchContacts,\n} from 'redux/contacts/operationsContacts';\nimport { selectContacts } from 'redux/contacts/selectorsContacts';\n\nexport default function ContactsList() {\n  const dispatch = useDispatch();\n  const { contacts } = useSelector(selectContacts);\n  const filter = useSelector(state => state.filter);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const cancelRef = React.useRef();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getVisibleContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const onDeleteContact = id => {\n    dispatch(deleteContact(id));\n    onClose();\n  };\n\n  return (\n    <Accordion allowMultiple>\n      {getVisibleContacts().map(({ name, number, id }) => (\n        <AccordionItem key={id}>\n          <AccordionButton>\n            <Box as=\"span\" flex=\"1\" textAlign=\"left\">\n              {name}\n            </Box>\n            <AccordionIcon />\n            <Button onClick={onOpen} colorScheme=\"red\" size=\"md\">\n              <DeleteIcon />\n            </Button>\n            <AlertDialog\n              isOpen={isOpen}\n              leastDestructiveRef={cancelRef}\n              onClose={onClose}\n            >\n              <AlertDialogOverlay>\n                <AlertDialogContent>\n                  <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n                    Delete contact\n                  </AlertDialogHeader>\n                  <AlertDialogBody>\n                    Are you sure? You can't undo this action afterwards.\n                  </AlertDialogBody>\n                  <AlertDialogFooter>\n                    <Button ref={cancelRef} onClick={onClose}>\n                      Cancel\n                    </Button>\n                    <Button\n                      colorScheme=\"red\"\n                      onClick={() => onDeleteContact(id)}\n                      ml={3}\n                    >\n                      Delete\n                    </Button>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialogOverlay>\n            </AlertDialog>\n          </AccordionButton>\n          <AccordionPanel pb={6}>{number}</AccordionPanel>\n        </AccordionItem>\n      ))}\n    </Accordion>\n  );\n}\n","import { Text } from '@chakra-ui/react';\nimport PropTypes from 'prop-types';\n\nconst ContactsTitle =({title}) => {\n  return <Text as='b' fontSize='2xl' color='gray.600' >{title}</Text>;\n}\n\nContactsTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default ContactsTitle;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport toast from 'react-hot-toast';\nimport {\n  Button,\n  Flex,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  Modal,\n  ModalBody,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalOverlay,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { AddIcon, PhoneIcon } from '@chakra-ui/icons';\nimport { TiUser } from 'react-icons/ti';\nimport ContactsTitle from 'components/ContactsTitle';\nimport { addContact } from 'redux/contacts/operationsContacts';\nimport { selectContacts } from 'redux/contacts/selectorsContacts';\n\nexport default function ContactForm() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const initialRef = React.useRef(null);\n  const finalRef = React.useRef(null);\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const dispatch = useDispatch();\n  const { contacts } = useSelector(selectContacts);\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isFindName = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isFindName) {\n      toast(`${name} is already in contacts !`, {\n        style: {\n          borderRadius: '10px',\n          background: 'red',\n          color: '#fff',\n        },\n      });\n      return;\n    } else {\n      dispatch(\n        addContact({\n          id: nanoid(),\n          name,\n          number,\n        })\n      );\n      reset();\n      onClose();\n    }\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <Flex gap={10} justify=\"start\" align=\"end\" mb={8}>\n        <ContactsTitle title=\"My Contacts\" />\n        <Button onClick={onOpen} colorScheme=\"messenger\">\n          <AddIcon boxSize={4} />\n        </Button>\n      </Flex>\n\n      <Modal\n        initialFocusRef={initialRef}\n        finalFocusRef={finalRef}\n        isOpen={isOpen}\n        onClose={onClose}\n        size=\"md\"\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Add contact</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <form onSubmit={handleSubmit}>\n              <InputGroup mb={6}>\n                <InputLeftElement pointerEvents=\"none\">\n                  <TiUser color=\"gray.300\" />\n                </InputLeftElement>\n                <Input\n                  size=\"md\"\n                  type=\"text\"\n                  name=\"name\"\n                  value={name}\n                  placeholder=\"Name\"\n                  onChange={handleChange}\n                  id={nameInputId}\n                  pattern=\"^[A-z-А-я\\s]+$\"\n                  title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                  required\n                />\n              </InputGroup>\n\n              <InputGroup mb={6}>\n                <InputLeftElement pointerEvents=\"none\">\n                  <PhoneIcon />\n                </InputLeftElement>\n                <Input\n                  type=\"tel\"\n                  placeholder=\"Phone number\"\n                  size=\"md\"\n                  name=\"number\"\n                  value={number}\n                  onChange={handleChange}\n                  id={numberInputId}\n                  pattern=\"^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                  title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                  required\n                />\n              </InputGroup>\n\n              <Flex justify=\"flex-end\" gap={6}>\n                <Button type=\"submit\" colorScheme=\"messenger\" size=\"md\">\n                  Save\n                </Button>\n                <Button onClick={onClose}>Cancel</Button>\n              </Flex>\n            </form>\n          </ModalBody>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Input, InputGroup, InputLeftElement } from '@chakra-ui/react';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { filterContacts } from 'redux/filter/sliceFilter';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const { filter } = useSelector(state => state.filter);\n\n  const changeFilter = e => {\n    dispatch(filterContacts(e.target.value.toLowerCase()));\n  };\n\n  return (\n    <InputGroup mb=\"8\">\n      <InputLeftElement pointerEvents=\"none\">\n        <SearchIcon />\n      </InputLeftElement>\n      <Input\n        type=\"text\"\n        onChange={changeFilter}\n        value={filter}\n        name=\"filter\"\n        placeholder=\"Find contacts by name\"\n      />\n    </InputGroup>\n  );\n};\n\nexport default Filter;\n","import { useSelector } from 'react-redux';\nimport { selectIsLoading } from 'redux/contacts/selectorsContacts';\nimport ContactsList from 'components/ContactList/ContactList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\n\nexport default function Contacts() {\n   const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <>\n      <ContactForm />\n      <div>{isLoading && 'Request in progress...'}</div>\n            <Filter />\n      <ContactsList />\n  \n    </>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectIsLoading","isLoading","ContactsList","dispatch","useDispatch","useSelector","filter","useDisclosure","isOpen","onOpen","onClose","cancelRef","React","useEffect","fetchContacts","allowMultiple","contact","name","toLowerCase","includes","map","number","id","as","flex","textAlign","onClick","colorScheme","size","leastDestructiveRef","fontSize","fontWeight","ref","deleteContact","onDeleteContact","ml","pb","title","color","ContactForm","initialRef","finalRef","useState","setName","setNumber","nameInputId","nanoid","numberInputId","handleChange","e","target","value","reset","gap","justify","align","mb","boxSize","initialFocusRef","finalFocusRef","onSubmit","preventDefault","find","toast","style","borderRadius","background","addContact","pointerEvents","I","type","placeholder","onChange","pattern","required","filterContacts","Contacts"],"sourceRoot":""}